<?php
/**
 * @file
 * A chron module to create custom tables and load data from CouchDb into these tables.
 */

error_reporting(E_ALL);
ini_set("display_errors", 1);

/**
* Cron job is creating the queue cron job.
*
*/
function ajexport2csv_cron() {

  $queue = DrupalQueue::get('ajexport2csv');
  $queue->createItem("arg1");
}


/**
* Cron jobs info.
*
* @return array
*/
function ajexport2csv_cron_queue_info()
{

    $queues = array();

    $queues['ajexport2csv'] = array(
        'worker callback' => 'load_export_worker',
        'time' => 3000, // time in seconds, this is the duration that the job will be CALLED, e.g.
    // after it finish it will be called again until the time is up.
    );


   return $queues;
}

/**
 * The queue job worker. Query registration from couchDB descending and load them into mySQL database.
 *
 */
function load_export_worker()
{
    $CHUNK_SIZE = 200;

 try{
    ajetllog_log("ajexport2csv", "MESSAGE", "PROCESSING STARTED");
    global $base_url;
    $linesAry = array();

    ajexport2csv_setModuleVariables();

    $regKeys = variable_get("regKeys");

    // retrieve all registrations
    $req_url = 'http://localhost:5984/coconut/_design/coconut/_view/resultsByQuestionAndComplete?startkey=%22Participant%20Registration-es%3Atrue%3Az%22&endkey=%22Participant%20Registration-es%3Atrue%22&descending=true&include_docs=false';


    // prepare the request options
    $req_options = array(
        'method' => 'GET',
        'timeout' => 300.0,
        'headers' => array(
            'Content-Type' => 'application/json'
        ));

    // query couchdb data
    $couch_response = drupal_http_request( $req_url, $req_options );


    // decode to json objects
    $rows = drupal_json_decode( $couch_response->data)['rows'];

    $size = sizeof($rows);

    ajetllog_log("ajexport2csv", "MESSAGE", "******Rows fetched:".$size);


    $i = 0;
    $docProcessed = 0;

    $line = ajexport2csv_writeHeader();

    array_push($linesAry, $line);

     $docIdsAry = array();

    foreach ( $rows as $one_row ){

        // open the document
        //$doc = ajexport2csv_OpenRegById($one_row['id']);

        array_push($docIdsAry,$one_row['id']);

        if ($i <= $CHUNK_SIZE) {
            $i++;
            continue;
        }


        // open all docs from this chunk
        $allDocs = openDocs($docIdsAry);
        $docIdsAry = array();
        $i = 0;

        foreach ( $allDocs as $doc ) {
            // convert document to CSV line
            $line = ajexport2csv_Doc2CSVLine($doc['doc']);

            // push to the final array
            array_push($linesAry, $line);

            //$result = varDumpToString($doc['doc']);

            //ajetllog_error("ajexport2csv", "MESSAGE0000", "doc=", $result, "");

        }

        $docProcessed += $CHUNK_SIZE;
        ajetllog_error("ajexport2csv", "MESSAGE", "Document Processed", $docProcessed, "");

        if ($docProcessed > 200)
          break;

    }


    // convert array to string
    $data = implode("\r\n", $linesAry);

    // dump data to the file
    ajexport2csv_generateFile($data);

    // clean
    ajexport2csv_deleteModuleVariables();
    
    ajetllog_log("ajexport2csv", "MESSAGE", "Data exported.");
 }catch(Exception $e){
     ajetllog_log("ajexport2csv", "ERROR", $e->getMessage());

 }
}

/**
 *
 * @param $docIds
 */
function openDocs($docIds){
   $req_url = "http://localhost:5984/coconut/_all_docs?keys=[";
   $urlIds = "";
   $start = true;

   foreach($docIds as $id){
       if ($start) {
           $urlIds ='%22'.$id.'%22';
           $start = false;
       }else{
           $urlIds =$urlIds.',%22'.$id.'%22';
       }
   }

    $req_url = $req_url.$urlIds."]&include_docs=true";


    // prepare the request options
    $req_options = array(
        'method' => 'GET',
        'timeout' => 300.0,
        'headers' => array(
            'Content-Type' => 'application/json'
        ));

    // query couchdb data
    $couch_response = drupal_http_request( $req_url, $req_options );

    // decode to json objects
    $rows = drupal_json_decode( $couch_response->data)['rows'];

    $size = sizeof($rows);

    ajetllog_log("ajexport2csv", "MESSAGE", "******Rows fetched FROM CHUNK:".$size);

    return $rows;
}

function varDumpToString($var) {
    ob_start();
    var_dump($var);
    $result = ob_get_clean();
    return $result;
}

/**
 * Opens the document by Id and returns the JSON object.
 *
 * @param $id
 */
function ajexport2csv_OpenRegById($id){
    // TBD: changed hard coded localhost link
    $req_url = 'http://localhost:5984/coconut/'.$id;

    $req_options = array(
        'method' => 'GET',
        'headers' => array(
            'Content-Type' => 'application/json'
        ));

    $couch_response = drupal_http_request( $req_url, $req_options );
    $doc = drupal_json_decode( $couch_response->data);

    return $doc;

}

/**
 * Writes header line for the CSV file.
 */
function ajexport2csv_writeHeader(){
    $regKeys = variable_get("regKeys");
    $line = "";

    // write header
    $start = true;
    foreach ($regKeys as $k=>$key) {
        // add BOM to UTF8
        //$key = chr(239) . chr(187) . chr(191) . $key;
        if ($start){
            $start = false;
            $line = $key;
        }else {
            $line = $line . "," . $key;
        }
    }

    $utf8_with_bom = chr(239) . chr(187) . chr(191) .$line;
    return $utf8_with_bom;
}


/**
 * Write document to csv line.
 *
 * @param $doc
 * @return string
 */
function ajexport2csv_Doc2CSVLine($doc){
    $regKeys = variable_get("regKeys");
    $line = "";


    $start = true;
    foreach ($regKeys as $k=>$key) {
        if (!array_key_exists($key, $doc))
          continue;


        if ($start){
                $start = false;
                $line = '"'.$doc[$key].'"';
        }else {
                $line = $line . ',"' . $doc[$key].'"';
        }

    }

    $utf8_with_bom = chr(239) . chr(187) . chr(191) . $line;
    return $utf8_with_bom;
}


/**
 * Generates the CSV file. The location for the file is
 *
 *      apps\drupal\htdocs\sites\default\files\ajexport
 *
 * param array() $lines
 *      int $save_mode
 *    File save mode from drupal core, ex FILE_EXISTS_REPLACE
 */
function ajexport2csv_generateFile($data, $save_mode = FILE_EXISTS_REPLACE) {
    try{
        $uri  =  'public://ajexport/AJRegistrations.csv';

        //Need to remove the filename from the uri
        $uri_target = file_uri_target($uri);
        $uri_scheme = file_uri_scheme($uri);
        $uri_path_info = pathinfo($uri_target);

        $directory = file_stream_wrapper_uri_normalize($uri_scheme . "://" . $uri_path_info['dirname']);

        if(file_prepare_directory($directory, FILE_CREATE_DIRECTORY)) {
            $path = file_stream_wrapper_uri_normalize($uri);
            $new_file = file_save_data($data, $path, $save_mode);
        } else {
            ajetllog_log("ajexport2csv", "ERROR", "AJEXPORT2CSV Could not create directory");
        }
    }catch(Exception $e){
        ajetllog_log("ajexport2csv", "ERROR", $e->getMessage());
    }
}



/**
 *
 * Use variable_set() to set module global variables.
 *
 *
 */
function ajexport2csv_setModuleVariables()
{
    try{
      // retrieve aj-registration table columns
        $regKeys = array("uuid","provider_id","provider_name","createdAt","lastModifiedAt","user_name","Fecha","Apellido","Apodo","Año","Sexo","BarrioComunidad","Calleynumero","Casa","Celular","Completado","Direccióndecorreoelectrónico","Día","Mes",
            "Municipio","Nombre","Nombredepersonadecontacto","NombredeusuariodeFacebook","Parentescoopersonarelacionada","Provincia","Teléfono","Estecolateralparticipante","Tieneunadireccióndecorreoelectrónico","TieneunnombredeusuariodeFacebook",
            "Tieneunnumerocelular","Tieneunnumerodetelefonoenlacasa");
        
      // set the columns as variable
      variable_set("regKeys", $regKeys);
    }catch(Exception $e){
        ajetllog_log("ajexport2csv", "ERROR", $e->getMessage());

    }
}
/**
 * Implement hook_enable()
 */
function ajexport2csv_enable() {

}

/**
 * Delete module variables.
 */
function ajexport2csv_deleteModuleVariables(){
    variable_del("ajRegsColumns");

}
