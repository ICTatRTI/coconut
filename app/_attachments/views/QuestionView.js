// Generated by CoffeeScript 1.9.2
var QuestionView,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; },
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty,
  indexOf = [].indexOf || function(item) { for (var i = 0, l = this.length; i < l; i++) { if (i in this && this[i] === item) return i; } return -1; };

QuestionView = (function(superClass) {
  extend(QuestionView, superClass);

  function QuestionView() {
    this.duplicateNone = bind(this.duplicateNone, this);
    this.duplicateAbort = bind(this.duplicateAbort, this);
    this.duplicateUpdate = bind(this.duplicateUpdate, this);
    this.onChange = bind(this.onChange, this);
    this.updateHeightDoc = bind(this.updateHeightDoc, this);
    this.saveNewDoc = bind(this.saveNewDoc, this);
    this.renderSummary = bind(this.renderSummary, this);
    this.render = bind(this.render, this);
    this.initialize = bind(this.initialize, this);
    return QuestionView.__super__.constructor.apply(this, arguments);
  }

  QuestionView.prototype.el = "#content";

  QuestionView.prototype.events = {
    "change #question-view input": "onChange",
    "change #question-view select": "onChange",
    "change #question-view textarea": "onChange",
    "click button.repeat": "repeat",
    "click button.repeat_summary": "repeatSummary",
    "click #question-view a:contains(Get current location)": "getLocation",
    "click .next_error": "runValidate",
    "click .validate_one": "onValidateOne",
    "click .duplicate_update": "duplicateUpdate",
    "click .duplicate_abordt": "duplicateAbort",
    "click .duplicate_none": "duplicateNone",
    "click .remove_repeat": "removeRepeat"
  };

  QuestionView.prototype.initialize = function(options) {
    var key, value;
    for (key in options) {
      value = options[key];
      this[key] = value;
    }
    if (Coconut.resultCollection == null) {
      Coconut.resultCollection = new ResultCollection();
    }
    this.autoscrollTimer = 0;
    window.showSuccess = true;
    return window.duplicateLabels = ['Apellido', 'Nombre', 'BarrioComunidad', 'Año', 'Día', 'Mes', 'Sexo'];
  };

  QuestionView.prototype.render = function() {
    var questionsName, skipperList, standard_value_table, surveyName;
    if ("module" === Coconut.config.local.get("mode")) {
      if (typeof this.standard_values["user_name"] === "undefined") {
        alert("Nombre de usuario no está definido.");
        return false;
      }
    }
    window.skipLogicCache = {};
    if ("module" !== Coconut.config.local.get("mode")) {
      questionsName = "<h1>" + this.model.id + "</h1>";
    }
    if ("module" === Coconut.config.local.get("mode")) {
      standard_value_table = "      " + (((function() {
        var _ref1, _results, key, re, value;
        _ref1 = this.standard_values;
        _results = [];
        for (key in _ref1) {
          value = _ref1[key];
          re = new RegExp("#", "g");
          value = value.replace(re, "/");
          _results.push("<input type='hidden' name='" + key + "' value='" + value + "'>");
        }
        return _results;
      }).call(this)).join("")) + "      ";
    }
    this.$el.html((standard_value_table || '') + " <div style='position:fixed; right:5px; color:white; background-color: #333; padding:20px; display:none; z-index:10: font-size:1.5em !important;' id='messageText'> Saving... </div> " + (questionsName || '') + " <div id='question-view'> " + (this.toHTMLForm(this.model)) + " </div>");
    this.updateCache();
    this.updateSkipLogic();
    skipperList = [];
    $(this.model.get("questions")).each((function(_this) {
      return function(index, question) {
        if (question.actionOnChange().match(/skip/i)) {
          skipperList.push(question.safeLabel());
        }
        if (question.actionOnQuestionsLoaded() !== "") {
          return CoffeeScript["eval"](question.actionOnQuestionsLoaded());
        }
      };
    })(this));
    this.triggerChangeIn(skipperList);
    this.jQueryUIze(this.$el);
    _.each($("input[type='autocomplete from list'],input[type='autocomplete from previous entries']"), function(element) {
      var minLength, source;
      element = $(element);
      if (element.attr("type") === 'autocomplete from list') {
        source = element.attr("data-autocomplete-options").replace(/\n|\t/, "").split(/, */);
        minLength = 0;
      } else {
        source = document.location.pathname.substring(0, document.location.pathname.indexOf("index.html")) + ("_list/values/byValue?key=\"" + (element.attr("name")) + "\"");
        minLength = 1;
      }
      return element.autocomplete({
        source: source,
        minLength: minLength,
        target: "#" + (element.attr("id")) + "-suggestions",
        callback: function(event) {
          element.val($(event.currentTarget).text());
          return element.autocomplete('clear');
        }
      });
    });
    if (this.readonly) {
      $('input, textarea').attr("readonly", "true");
    }
    this.updateHeightDoc();
    this.addUuid();
    surveyName = window.Coconut.questionView.model.id;
    if (surveyName === "Participant Registration-es") {
      this.updateLocations();
    }
    return this.trigger("rendered");
  };

  QuestionView.prototype.renderSummary = function() {
    var onClick, questionsName, skipperList, standard_value_table, surveyName, uuid;
    if ("module" === Coconut.config.local.get("mode")) {
      if (typeof this.standard_values["user_name"] === "undefined") {
        alert("Nombre de usuario no está definido.");
        return false;
      }
    }
    window.skipLogicCache = {};
    if ("module" !== Coconut.config.local.get("mode")) {
      questionsName = "<h1>" + this.model.id + "</h1>";
    }
    if ("module" === Coconut.config.local.get("mode")) {
      standard_value_table = "      " + (((function() {
        var _ref1, _results, key, re, value;
        _ref1 = this.standard_values;
        _results = [];
        for (key in _ref1) {
          value = _ref1[key];
          re = new RegExp("#", "g");
          value = value.replace(re, "/");
          _results.push("<input type='hidden' name='" + key + "' value='" + value + "'>");
        }
        return _results;
      }).call(this)).join("")) + "      ";
    }
    this.$el.html((standard_value_table || '') + " <div style='position:fixed; right:5px; color:white; background-color: #333; padding:20px; display:none; z-index:10: font-size:1.5em !important;' id='messageText'> Saving... </div> " + (questionsName || '') + " <div id='question-view'> " + (this.toSummaryForm(this.model)) + " </div>");
    if (this.standard_values["isEvaluator"] === "true") {
      onClick = "onClick=\"document.location.reload();\"";
      this.$el.append("<div  style='width:100%; font-size:3em; font-color:red ' id='messageInactive'></div>");
      uuid = Coconut.questionView.result.get("uuid");
      this.$("#messageInactive").append("<p align='center'> Por favor proceda con cuidado. Si Clcik el botón de abajo el participante ya no serán accesibles por el sistema.</p><p align='center'><button><a href='#update/inactive/" + uuid + "'>Marcos Inactivo</a></button></p>");
    }
    this.updateCache();
    this.updateSkipLogic();
    skipperList = [];
    $(this.model.get("questions")).each((function(_this) {
      return function(index, question) {
        if (question.actionOnChange().match(/skip/i)) {
          skipperList.push(question.safeLabel());
        }
        if (question.actionOnQuestionsLoaded() !== "") {
          return CoffeeScript["eval"](question.actionOnQuestionsLoaded());
        }
      };
    })(this));
    this.triggerChangeIn(skipperList);
    this.jQueryUIze(this.$el);
    _.each($("input[type='autocomplete from list'],input[type='autocomplete from previous entries']"), function(element) {
      var minLength, source;
      element = $(element);
      if (element.attr("type") === 'autocomplete from list') {
        source = element.attr("data-autocomplete-options").replace(/\n|\t/, "").split(/, */);
        minLength = 0;
      } else {
        source = document.location.pathname.substring(0, document.location.pathname.indexOf("index.html")) + ("_list/values/byValue?key=\"" + (element.attr("name")) + "\"");
        minLength = 1;
      }
      return element.autocomplete({
        source: source,
        minLength: minLength,
        target: "#" + (element.attr("id")) + "-suggestions",
        callback: function(event) {
          element.val($(event.currentTarget).text());
          return element.autocomplete('clear');
        }
      });
    });
    if (this.readonly) {
      $('input, textarea').attr("readonly", "true");
    }
    this.updateHeightDoc();
    this.addUuid();
    surveyName = window.Coconut.questionView.model.id;
    if (surveyName === "Participant Registration-es") {
      this.updateLocations();
    }
    return this.trigger("rendered");
  };

  QuestionView.prototype.jQueryUIze = function($obj) {
    $obj.find("input[type='text'],input[type='number'],input[type='autocomplete from previous entries'],input[type='autocomplete from list']").val();
    $obj.find("input[type='radio'],input[type='checkbox']").checkboxradio();
    $obj.find('ul').listview();
    $obj.find('select').selectmenu();
    return $obj.find('a').button();
  };

  QuestionView.prototype.addUuid = function() {
    var c;
    if (window.questionCache['uuid']) {
      c = new C32();
      c.getRandom(8);
      c.addChecksum();
      console.log('UUID is' + c.value);
      return window.questionCache['uuid'].find("input").val(c.value);
    }
  };

  QuestionView.prototype.triggerChangeIn = function(names) {
    var elements, j, len, name, results;
    results = [];
    for (j = 0, len = names.length; j < len; j++) {
      name = names[j];
      elements = [];
      elements.push(window.questionCache[name].find("input, select, textarea"));
      results.push($(elements).each((function(_this) {
        return function(index, element) {
          var event;
          event = {
            target: element
          };
          return _this.actionOnChange(event);
        };
      })(this)));
    }
    return results;
  };

  QuestionView.prototype.saveNewDoc = function(doc) {
    var newHeight;
    newHeight = document.body.scrollHeight;
    doc['height'] = newHeight;
    return $.couch.db("coconut").saveDoc(doc);
  };

  QuestionView.prototype.updateHeightDoc = function() {
    var heightDocId;
    heightDocId = this.model.id + "-height";
    return $.couch.db("coconut").openDoc(heightDocId, {
      success: (function(_this) {
        return function(doc) {
          return _this.saveNewDoc(doc);
        };
      })(this),
      error: (function(_this) {
        return function(doc) {
          return _this.saveNewDoc({
            "_id": heightDocId
          });
        };
      })(this)
    });
  };

  QuestionView.prototype.runValidate = function() {
    return this.validateAll();
  };

  QuestionView.prototype.onChange = function(event) {
    var $target, e, geographyRelevant, messageVisible, surveyName, targetName, warningShowing, wasValid;
    event.stopPropagation();
    event.stopImmediatePropagation();
    $target = $(event.target);
    targetName = $target.attr("name");
    if (targetName === "Completado") {
      if (this.changedComplete && this.isValidAll) {
        this.changedComplete = false;
        return;
      }
      this.validateAll();
    } else {
      this.changedComplete = false;
      messageVisible = window.questionCache[targetName].find(".message").is(":visible");
      warningShowing = window.questionCache[targetName].find(".message .warning").length !== 0;
      if (!(messageVisible && !warningShowing)) {
        wasValid = this.validateOne({
          key: targetName,
          autoscroll: false,
          button: "<button type='button' data-name='" + targetName + "' class='validate_one'>Revisar</button>"
        });
      }
    }
    _.delay((function(_this) {
      return function() {
        return _this.save();
      };
    })(this), 500);
    this.updateSkipLogic();
    this.actionOnChange(event);
    try {
      messageVisible = window.questionCache[targetName].find(".message").is(":visible");
    } catch (_error) {
      e = _error;
      messageVisible = false;
    }
    if (wasValid && !messageVisible) {
      this.autoscroll(event);
    }
    surveyName = window.Coconut.questionView.model.id;
    if (surveyName === "Participant Registration-es" && indexOf.call(window.duplicateLabels, targetName) >= 0) {
      this.duplicateCheck();
    }
    geographyRelevant = ["Provincia", "Municipio", "BarrioComunidad"].indexOf(targetName) !== -1;
    if (surveyName === "Participant Registration-es" && geographyRelevant) {
      return this.updateLocations();
    }
  };

  QuestionView.prototype.updateLocations = function() {
    return _.delay(function() {
      var $city, $hood, $province, CITY, HOOD, PROVINCE, cities, geography, hoods, j, len, location, provinces, todo;
      PROVINCE = 0;
      CITY = 1;
      HOOD = 2;
      geography = [["SANTO DOMINGO", "SANTO DOMINGO ESTE", "VILLA DUARTE"], ["SANTO DOMINGO", "SANTO DOMINGO ESTE", "LOS MINA NORTE"], ["SANTO DOMINGO", "SANTO DOMINGO ESTE", "LOS MINA SUR"], ["SANTO DOMINGO", "SANTO DOMINGO ESTE", "SANS SOUCI"], ["SANTO DOMINGO", "SANTO DOMINGO ESTE", "LOS MAMEYES"], ["SANTO DOMINGO", "SANTO DOMINGO ESTE", "INVIVIENDA"], ["SANTO DOMINGO", "SANTO DOMINGO ESTE", "LOS TRES OJOS"], ["SANTO DOMINGO", "SANTO DOMINGO ESTE", "MENDOZA "], ["SANTO DOMINGO", "SANTO DOMINGO ESTE", "HAINAMOSA"], ["SANTO DOMINGO", "SANTO DOMINGO ESTE", "SAN ISIDRO ADENTRO"], ["SANTO DOMINGO", "SANTO DOMINGO ESTE", "LOS FRAILES"], ["SANTO DOMINGO", "SANTO DOMINGO ESTE", "LOS MINA VIEJO"], ["SANTO DOMINGO", "SANTO DOMINGO ESTE", "LA BARQUITA"], ["SANTO DOMINGO", "SANTO DOMINGO ESTE", "EL DIQUE"], ["SANTO DOMINGO", "SANTO DOMINGO ESTE", "BRISAS DEL OZAMA"], ["SANTO DOMINGO", "SANTO DOMINGO OESTE", "LAS CAOBAS"], ["SANTO DOMINGO", "SANTO DOMINGO OESTE", "BUENOS AIRES DE HERRERA"], ["SANTO DOMINGO", "SANTO DOMINGO OESTE", "MANOGUAYABO"], ["SANTO DOMINGO", "SANTO DOMINGO OESTE", "BAYONA"], ["SANTO DOMINGO", "SANTO DOMINGO OESTE", "EL CAFÉ"], ["SANTO DOMINGO", "SANTO DOMINGO OESTE", "LOYOLA"], ["SANTO DOMINGO", "SANTO DOMINGO OESTE", "LAS PALMAS DE HERRERA"], ["SANTO DOMINGO", "LOS ALCARRIZOS", "LAS MERCEDES"], ["SANTO DOMINGO", "LOS ALCARRIZOS", "LOS LIBERTADORES"], ["SANTO DOMINGO", "LOS ALCARRIZOS", "ALTOS DE CHAVON"], ["SANTO DOMINGO", "LOS ALCARRIZOS", "BARRIO LANDIA"], ["SANTO DOMINGO", "LOS ALCARRIZOS", "ZONA FRANCA"], ["SANTO DOMINGO", "SANTO DOMINGO NORTE", "VILLA MELLA"], ["SANTO DOMINGO", "SANTO DOMINGO NORTE", "SABANA PERDIDA"], ["SANTO DOMINGO", "SANTO DOMINGO NORTE", "GUARICANO"], ["SANTO DOMINGO", "SANTO DOMINGO NORTE", "LOS CASABES"], ["SANTO DOMINGO", "LA VICTORIA (DM)", "LA VICTORIA"], ["SANTO DOMINGO", "BOCA CHICA", "ANDRES"], ["SANTO DOMINGO", "BOCA CHICA", "LOS COQUITOS"], ["SANTO DOMINGO", "BOCA CHICA", "LA COCA"], ["SANTO DOMINGO", "BOCA CHICA", "BELLA VISTA"], ["SANTO DOMINGO", "BOCA CHICA", "ALTOS DE CHAVON"], ["SANTO DOMINGO", "BOCA CHICA", "LA CUEVA DEL HUMO"], ["SANTO DOMINGO", "BOCA CHICA", "MONTE REY"], ["SANTO DOMINGO", "BOCA CHICA-LA MALENA", "LA MALENA"], ["SANTO DOMINGO", "BOCA CHICA-LA CALETA", "LA CIEN MIL - LA PIEDRA"], ["SANTO DOMINGO", "BOCA CHICA-LA CALETA", "EL HIGO"], ["SANTO DOMINGO", "BOCA CHICA-LA CALETA", "CAMPO LINDO"], ["SANTO DOMINGO", "BOCA CHICA-LA CALETA", "LA CALETA"], ["SANTO DOMINGO", "BOCA CHICA-LA CALETA", "VALIENTE"], ["SANTO DOMINGO", "BOCA CHICA-LA CALETA", "MONTE ADENTRO"], ["SANTO DOMINGO", "BOCA CHICA-ANDRES", "MARIA ESTELA"], ["SANTO DOMINGO", "BOCA CHICA-ANDRES", "EL BRISAL"], ["SANTO DOMINGO", "BOCA CHICA-ANDRES", "MIRAMAR"], ["SANTO DOMINGO", "BOCA CHICA-ANDRES", "ENSANCHE PROGRESO"], ["SANTO DOMINGO", "BOCA CHICA-ANDRES", "BRISAS CAUCEDO"], ["SANTO DOMINGO", "BOCA CHICA-ANDRES", "BARRIO AZUL"], ["SANTO DOMINGO", "BOCA CHICA-ANDRES", "LOS TANQUECITOS"], ["SANTO DOMINGO", "BOCA CHICA-ANDRES", "LA BOBINA"], ["SANTO DOMINGO", "BOCA CHICA-ANDRES", "FINCA VIGIA"], ["SANTO DOMINGO", "BOCA CHICA-ANDRES", "LOS COCOS"], ["SANTO DOMINGO", "BOCA CHICA-ANDRES", "MI PROGRESO"], ["SANTO DOMINGO", "BOCA CHICA-ANDRES", "BRISAS DEL NORTE (LOS BOTAOS)"], ["DISTRITO NACIONAL", "SANTO DOMINGO DE GUZMAN", "LA ZURZA"], ["DISTRITO NACIONAL", "SANTO DOMINGO DE GUZMAN", "VILLAS AGRÍCOLAS"], ["DISTRITO NACIONAL", "SANTO DOMINGO DE GUZMAN", "VILLA JUANA"], ["DISTRITO NACIONAL", "SANTO DOMINGO DE GUZMAN", "24 DE ABRIL"], ["DISTRITO NACIONAL", "SANTO DOMINGO DE GUZMAN", "MEJORAMIENTO SOCIAL"], ["DISTRITO NACIONAL", "SANTO DOMINGO DE GUZMAN", "VILLA FRANCISCA"], ["DISTRITO NACIONAL", "SANTO DOMINGO DE GUZMAN", "DOMINGO SAVIO"], ["DISTRITO NACIONAL", "SANTO DOMINGO DE GUZMAN", "GUALEY"], ["DISTRITO NACIONAL", "SANTO DOMINGO DE GUZMAN", "SIMON BOLIVAR"], ["DISTRITO NACIONAL", "SANTO DOMINGO DE GUZMAN", "CAPOTILLO"], ["DISTRITO NACIONAL", "SANTO DOMINGO DE GUZMAN", "LA CIENAGA"], ["DISTRITO NACIONAL", "SANTO DOMINGO DE GUZMAN", "LOS GUANDULES"], ["DISTRITO NACIONAL", "SANTO DOMINGO DE GUZMAN", "LAS CAŇITAS"], ["DISTRITO NACIONAL", "SANTO DOMINGO DE GUZMAN", "GUACHUPITA"], ["SAN CRISTOBAL", "VILLA ALTAGRACIA", "JUAN PABLO DUARTE"], ["SAN CRISTOBAL", "VILLA ALTAGRACIA", "CENTRO DEL PUEBLO"], ["SAN CRISTOBAL", "VILLA ALTAGRACIA", "INVI"], ["SAN CRISTOBAL", "BAJOS DE HAINA", "PIEDRA BLANCA"], ["SAN CRISTOBAL", "BAJOS DE HAINA", "LOS GRINGOS"], ["SAN CRISTOBAL", "BAJOS DE HAINA", "EL CENTRO"], ["MONSEÑOR NOUEL", "BONAO", "BARRIO PARAISO"], ["MONSEÑOR NOUEL", "BONAO", "SANTA ANA"], ["MONSEÑOR NOUEL", "BONAO", "BRISAS DEL YUNA"], ["MONSEÑOR NOUEL", "BONAO", "VILLA LIBERACION"], ["MONSEÑOR NOUEL", "BONAO", "VILLA PROGRESO"], ["DUARTE", "SAN FCO DE MACORIS", "VISTA DEL VALLE"], ["DUARTE", "SAN FCO DE MACORIS", "CENTRO DE LA CIUDAD-'B'"], ["DUARTE", "SAN FCO DE MACORIS", "EL CIRUELILLO"], ["DUARTE", "SAN FCO DE MACORIS", "RIVERA DEL JAYA"], ["DUARTE", "SAN FCO DE MACORIS", "LOS JARDINES"], ["DUARTE", "SAN FCO DE MACORIS", "LOS PISA COSTURA"], ["DUARTE", "SAN FCO DE MACORIS", "BUENOS AIRES"], ["DUARTE", "SAN FCO DE MACORIS", "SAN VICENTE DE PAUL"], ["DUARTE", "SAN FCO DE MACORIS", "SAN MARTIN DE PORRES"], ["DUARTE", "SAN FCO DE MACORIS", "EL CAPACITO"], ["DUARTE", "SAN FCO DE MACORIS", "EL HORMIGUERO"], ["DUARTE", "SAN FCO DE MACORIS", "ERCILIA PEPIN"], ["DUARTE", "SAN FCO DE MACORIS", "EL MADRIGAL"], ["DUARTE", "SAN FCO DE MACORIS", "LOS GRULLON"], ["DUARTE", "SAN FCO DE MACORIS", "UGAMBA"], ["DUARTE", "SAN FCO DE MACORIS", "LOS ESPINOLA"], ["DUARTE", "SAN FCO DE MACORIS", "SANTA ANA"], ["DUARTE", "SAN FCO DE MACORIS", "RABO DE CHIVO"], ["DUARTE", "SAN FCO DE MACORIS", "PUEBLO NUEVO"], ["DUARTE", "SAN FCO DE MACORIS", "LOS RIELES ABAJO"], ["DUARTE", "SAN FCO DE MACORIS", "24 DE ABRIL"], ["DUARTE", "SAN FCO DE MACORIS", "LA ALTAGRACIA"], ["DUARTE", "SAN FCO DE MACORIS", "CRISTO REY"], ["DUARTE", "SAN FCO DE MACORIS", "LAS CAOBAS"], ["DUARTE", "SAN FCO DE MACORIS", "27 DE FEBRERO"], ["DUARTE", "SAN FCO DE MACORIS", "SAN PEDRO"], ["DUARTE", "SAN FCO DE MACORIS", "VILLA VERDE"], ["DUARTE", "SAN FCO DE MACORIS", "BARRIO AZUL"], ["DUARTE", "SAN FCO DE MACORIS", "AGUAYO"], ["PUERTO PLATA", "SAN FELIPE DE PUERTO PLATA", "HAITI"], ["PUERTO PLATA", "SAN FELIPE DE PUERTO PLATA", "LOS COQUITOS"], ["PUERTO PLATA", "SAN FELIPE DE PUERTO PLATA", "EL JAVILLAR"], ["PUERTO PLATA", "SAN FELIPE DE PUERTO PLATA", "NUEVO RENACER"], ["PUERTO PLATA", "SAN FELIPE DE PUERTO PLATA", "PLAYA OESTE"], ["PUERTO PLATA", "SAN FELIPE DE PUERTO PLATA", "LOS COCOS"], ["PUERTO PLATA", "SAN FELIPE DE PUERTO PLATA", "PADRE GRANERO"], ["PUERTO PLATA", "SAN FELIPE DE PUERTO PLATA", "PADRE LAS CASAS"], ["PUERTO PLATA", "SAN FELIPE DE PUERTO PLATA", "VILLA PROGRESO"], ["PUERTO PLATA", "SAN FELIPE DE PUERTO PLATA", "LOS BORDAS"], ["PUERTO PLATA", "SAN FELIPE DE PUERTO PLATA", "SAN MARCOS"], ["PUERTO PLATA", "SAN FELIPE DE PUERTO PLATA", "CRISTO REY"], ["PUERTO PLATA", "IMBERT", "CENTRO DEL PUEBLO"], ["PUERTO PLATA", "IMBERT", "PROYECTO"], ["PUERTO PLATA", "LUPERON", "LUPERON"], ["PUERTO PLATA", "LUPERON", "LOS BELLOSOS"], ["PUERTO PLATA", "LUPERON", "LOS RAMONES"], ["PUERTO PLATA", "SOSUA", "SAN ANTONIO"], ["PUERTO PLATA", "SOSUA", "LOS CHARAMICOS"], ["PUERTO PLATA", "SOSUA", "EL BATEY"], ["PUERTO PLATA", "SOSUA", "SOSUA ABAJO"], ["PUERTO PLATA", "SOSUA", "MARANATHA"], ["PUERTO PLATA", "SOSUA", "LOS CASTILLOS"], ["PUERTO PLATA", "CABARETE", "CABARETE"], ["PUERTO PLATA", "CABARETE", "CALLEJON DE LA LOMA"], ["PUERTO PLATA", "CABARETE", "CALLEJON DEL BLANCO"], ["PUERTO PLATA", "CABARETE", "BOMBITA"], ["PUERTO PLATA", "CABARETE", "LAS CIENAGAS"], ["PUERTO PLATA", "MONTELLANO", "LOS CIRUELOS"], ["PUERTO PLATA", "MONTELLANO", "PANCHO MATEO"], ["PUERTO PLATA", "MONTELLANO", "EL TAMARINDO"], ["PUERTO PLATA", "MONTELLANO", "SEBERET"], ["PUERTO PLATA", "MONTELLANO", "LOS CARTONES"], ["SANTIAGO", "VILLA BISONO (NAVARRETE)", "EL CERRO"], ["SANTIAGO", "VILLA BISONO (NAVARRETE)", "CENTRO DEL PUEBLO"], ["SANTIAGO", "VILLA BISONO (NAVARRETE)", "LOS CANDELONES"], ["SANTIAGO", "VILLA BISONO (NAVARRETE)", "DUARTE"], ["SANTIAGO", "LICEY AL MEDIO", "LICEY AL MEDIO"], ["SANTIAGO", "SANTIAGO DE LOS CABALLEROS", "GUAYABAL AL MEDIO"], ["SANTIAGO", "SANTIAGO DE LOS CABALLEROS", "PUÑAL ADENTRO"], ["SANTIAGO", "SANTIAGO DE LOS CABALLEROS", "CIENFUEGOS"], ["SANTIAGO", "SANTIAGO DE LOS CABALLEROS", "MONTE RICO"], ["SANTIAGO", "SANTIAGO DE LOS CABALLEROS", "LOS SALADOS"], ["SANTIAGO", "SANTIAGO DE LOS CABALLEROS", "ALTOS DE VIREYA"], ["SANTIAGO", "SANTIAGO DE LOS CABALLEROS", "ESPAILLAT"], ["SANTIAGO", "SANTIAGO DE LOS CABALLEROS", "BERMUDEZ"], ["SANTIAGO", "SANTIAGO DE LOS CABALLEROS", "LA OTRA BANDA"], ["SANTIAGO", "SANTIAGO DE LOS CABALLEROS", "BARACOA"], ["SANTIAGO", "SANTIAGO DE LOS CABALLEROS", "LA JOYA"], ["SANTIAGO", "SANTIAGO DE LOS CABALLEROS", "BELLA VISTA"], ["SANTIAGO", "SANTIAGO DE LOS CABALLEROS", "LA YAGUITA DE PASTOR"], ["SANTIAGO", "SANTIAGO DE LOS CABALLEROS", "LOS JAZMINES"], ["SANTIAGO", "SANTIAGO DE LOS CABALLEROS", "NIBAJE"], ["SANTIAGO", "SANTIAGO DE LOS CABALLEROS", "LOS PEPINES"], ["SANTIAGO", "SANTIAGO DE LOS CABALLEROS", "BUENOS AIRES"], ["SANTIAGO", "SANTIAGO DE LOS CABALLEROS", "HATO DEL YAQUE"], ["SANTIAGO", "SANTIAGO DE LOS CABALLEROS", "CAMBOYA"], ["SANTIAGO", "SANTIAGO DE LOS CABALLEROS", "LOS CIRUELITOS"], ["SANTIAGO", "SANTIAGO DE LOS CABALLEROS", "EL HOYO DE LIA"], ["SANTIAGO", "SANTIAGO DE LOS CABALLEROS", "LA CANELA"], ["SANTIAGO", "SANTIAGO DE LOS CABALLEROS", "PEKIN"], ["SANTIAGO", "SANTIAGO DE LOS CABALLEROS", "ARROYO HONDO"], ["SANTIAGO", "SANTIAGO DE LOS CABALLEROS", "TAMBORIL"], ["SANTIAGO", "SANTIAGO DE LOS CABALLEROS", "GURABO"], ["SANTIAGO", "SANTIAGO DE LOS CABALLEROS", "SABANA IGLESIA"], ["SANTIAGO", "SANTIAGO DE LOS CABALLEROS", "EL EJIDO"], ["SANTIAGO", "SANTIAGO DE LOS CABALLEROS", "ENSANCHE HERMANAS MIRABAL"], ["SANTIAGO", "SANTIAGO DE LOS CABALLEROS", "LOS PLATANITOS"], ["SANTIAGO", "SANTIAGO DE LOS CABALLEROS", "GURABITO"], ["SANTIAGO", "SANTIAGO DE LOS CABALLEROS", "BARRIO LINDO"], ["SANTIAGO", "SANTIAGO DE LOS CABALLEROS", "LA HERREDURA"], ["SANTIAGO", "SANTIAGO DE LOS CABALLEROS", "HATO MAYOR"]];
      $province = questionCache.Provincia.find("input");
      $city = questionCache.Municipio.find("input");
      $hood = questionCache.BarrioComunidad.find("input");
      provinces = [];
      cities = [];
      hoods = [];
      for (j = 0, len = geography.length; j < len; j++) {
        location = geography[j];
        if (!~provinces.indexOf(location[PROVINCE])) {
          provinces.push(location[PROVINCE]);
        }
        if ($province.val().toLowerCase() === location[PROVINCE].toLowerCase()) {
          if (!~cities.indexOf(location[CITY])) {
            cities.push(location[CITY]);
          }
        }
        if ($city.val().toLowerCase() === location[CITY].toLowerCase()) {
          if (!~hoods.indexOf(location[HOOD])) {
            hoods.push(location[HOOD]);
          }
        }
      }
      todo = [[$province, provinces], [$city, cities], [$hood, hoods]];
      return $(todo).each(function(index, data) {
        var element, list;
        element = data[0];
        list = data[1];
        return element.autocomplete({
          source: list,
          minLength: 1,
          target: "#" + (element.attr("id")) + "-suggestions",
          callback: function(event) {
            element.val($(event.currentTarget).text());
            return element.autocomplete('clear');
          }
        });
      });
    }, 1000);
  };

  QuestionView.prototype.duplicateCheck = function(event) {
    var base, community, count, dobAno, dobDia, dobMes, family, j, key, label, len, mesNum, municipality, names, ref, sexo, spacePattern;
    count = 0;
    window.Coconut.duplicates = [];
    ref = window.duplicateLabels;
    for (j = 0, len = ref.length; j < len; j++) {
      label = ref[j];
      if (typeof (base = window.getValueCache)[label] === "function" ? base[label]() : void 0) {
        count++;
      }
    }
    spacePattern = new RegExp(" ", "g");
    family = (window.getValueCache['Apellido']() || '').toLowerCase().replace(spacePattern, '');
    names = (window.getValueCache['Nombre']() || '').toLowerCase().replace(spacePattern, '');
    municipality = (window.getValueCache['Municipio']() || '').toLowerCase().replace(spacePattern, '');
    community = (window.getValueCache['BarrioComunidad']() || '').toLowerCase().replace(spacePattern, '');
    sexo = (window.getValueCache['Sexo']() || '').toLowerCase().replace(spacePattern, '');
    dobDia = (window.getValueCache['Día']() || '').toLowerCase().replace(spacePattern, '');
    if (dobDia.length < 2) {
      dobDia = "0" + dobDia;
    }
    dobMes = (window.getValueCache['Mes']() || '').toLowerCase().replace(spacePattern, '');
    dobAno = (window.getValueCache['Año']() || '').toLowerCase().replace(spacePattern, '');
    mesNum = spanishMonth2Number(dobMes);
    if (mesNum.length < 2) {
      mesNum = "0" + mesNum;
    }
    key = [family, names, municipality, community, sexo, dobDia, mesNum, dobAno].join(":");
    if (~key.indexOf("::")) {
      return;
    }
    window.Coconut.duplicateKeys = {};
    return $.couch.db("coconut").view("coconut/duplicateCheck", {
      keys: [key],
      success: function(data) {
        var html, i, ignoredKeys, k, len1, ref1, ref2, row, value;
        ignoredKeys = "_rev _id question collection".split(" ");
        if (data.rows.length === 0) {
          return;
        }
        if ($("#duplicates").length === 0) {
          $("#content").append("<div id='duplicates'></div>");
        }
        alert("Duplicados posibles detectado");
        html = "<br><br> <h1>Duplicados posibles</h1>";
        ref1 = data.rows;
        for (i = k = 0, len1 = ref1.length; k < len1; i = ++k) {
          row = ref1[i];
          window.Coconut.duplicateKeys[row.key] = true;
          window.Coconut.duplicates[i] = row.value;
          html += "<h2>Posibilidad " + (i + 1) + "</h2> <table style='font-size: 1.4em;'> <tr>";
          ref2 = row.value;
          for (key in ref2) {
            value = ref2[key];
            if ((value != null) && !~ignoredKeys.indexOf(key)) {
              html += "<tr><th style='text-align:left;'>" + key + "</th><td>" + value + "</td></tr>";
            }
          }
          html += "</tr> <tr> <td colspan='2' style='font-size:1.5em; padding:1em;'> Si esta persona es una duplicada,<br> <button class='duplicate_update' data-index='" + i + "'>Usar esta informaci&oacute;n y actualizar</button><br> <button class='duplicate_abort' data-index='" + i + "'>Abortar corriente impreso</button> </td> </tr> </table>";
        }
        html += "<button class='duplicate_none'>No hay duplicados. Clarar.</button>";
        $("#duplicates").html(html);
        return $("#duplicates").scrollTo();
      }
    });
  };

  QuestionView.prototype.duplicateUpdate = function(event) {
    var index;
    event.stopImmediatePropagation();
    if (confirm("Reemplazar corriente información con esta?")) {
      index = parseInt($(event.target).attr("data-index"));
      questionCache['uuid'].find("input").val(window.Coconut.duplicates[index]['uuid']);
      js2form($('#question-view').get(0), window.Coconut.duplicates[index]);
      return $("#duplicates").empty();
    }
  };

  QuestionView.prototype.duplicateAbort = function(event) {
    event.stopImmediatePropagation();
    if (confirm("¿Está seguro?\n\nEste acción caminará un impreso nuevo.")) {
      return window.location.reload();
    }
  };

  QuestionView.prototype.duplicateNone = function() {
    return $("#duplicates").empty();
  };

  QuestionView.prototype.onValidateOne = function(event) {
    var $target, name;
    $target = $(event.target);
    name = $(event.target).attr('data-name');
    return this.validateOne({
      key: name,
      autoscroll: true,
      leaveMessage: false,
      button: "<button type='button' data-name='" + name + "' class='validate_one'>Revisar</button>"
    });
  };

  QuestionView.prototype.validateAll = function() {
    var $button, $question, aPassed, completeButtonModel, hasOnComplete, html, isValid, j, k, key, l, len, len1, len2, len3, link, m, onClick, onComplete, questionIsntValid, re, ref, ref1, ref2, ref3, sPassed, v;
    $button = $("[name=Completado]");
    this.isValidAll = false;
    isValid = true;
    ref = window.keyCache;
    for (j = 0, len = ref.length; j < len; j++) {
      key = ref[j];
      $question = window.questionCache[key];
      if (!$question.hasClass("group")) {
        questionIsntValid = !this.validateOne({
          key: key,
          autoscroll: isValid,
          leaveMessage: false
        });
      }
      if (isValid && questionIsntValid) {
        isValid = false;
      }
    }
    this.completeButton(isValid);
    completeButtonModel = _(Coconut.questionView.model.get("questions")).filter(function(a) {
      return a.get("label") === "Completado";
    })[0];
    hasOnComplete = completeButtonModel.has("onComplete");
    if (hasOnComplete) {
      onComplete = completeButtonModel.get("onComplete");
    }
    if (hasOnComplete && isValid) {
      switch (onComplete.type) {
        case "redirect":
          if (onComplete.route != null) {
            Coconut.router.navigate(onComplete.route, true);
          }
          break;
        case "choice":
          if ((onComplete.message != null) && (onComplete.links != null)) {
            html = "<p>" + onComplete.message + "</p>";
            ref1 = onComplete.links;
            for (k = 0, len1 = ref1.length; k < len1; k++) {
              link = ref1[k];
              aPassed = [];
              if (link.pass != null) {
                ref2 = link.pass;
                for (l = 0, len2 = ref2.length; l < len2; l++) {
                  key = ref2[l];
                  aPassed.push(key + "=" + (window.getValueCache[key]()));
                }
              }
              if (link.urlparams != null) {
                ref3 = link.urlparams;
                for (m = 0, len3 = ref3.length; m < len3; m++) {
                  key = ref3[m];
                  re = new RegExp("/", "g");
                  v = $('[name="' + key + '"]').val();
                  v = v.replace(re, "#");
                  aPassed.push(key + "=" + v);
                }
              }
              if (aPassed.length > 0) {
                if (link.isreport != null) {
                  sPassed = "/" + aPassed.join("/");
                } else {
                  sPassed = "/" + aPassed.join("&");
                }
              }
              onClick = '';
              if ((link.pass == null) && ~window.location.href.indexOf(link.route)) {
                onClick = 'onClick=\"document.location.reload();\"';
              }
              html += "<button><a href='#" + link.route + (sPassed || '') + "' " + onClick + ">" + link.label + "</a></button>";
            }
            if ($(".onComplete").length === 0) {
              $button.after("<div class='onComplete'>" + html + "</div>");
            }
            $(".onComplete").scrollTo();
          }
      }
    }
    if (isValid) {
      $button.scrollTo();
    }
    if (isValid) {
      this.isValidAll = true;
    }
    return isValid;
  };

  QuestionView.prototype.validateOne = function(options) {
    var $message, $question, autoscroll, button, e, key, leaveMessage, message, warning;
    key = options.key || '';
    autoscroll = options.autoscroll || false;
    button = options.button || "<button type='button' class='next_error'>Siguiente Error</button>";
    leaveMessage = options.leaveMessage || false;
    $question = window.questionCache[key];
    $message = $question.find(".message");
    if (key === 'Completado') {
      return '';
    }
    if ($question.hasClass("group")) {
      return '';
    }
    try {
      message = this.isValid(key);
    } catch (_error) {
      e = _error;
      alert("isValid error in " + key + "\n" + e);
      message = "";
    }
    if ($message.is(":visible") && leaveMessage) {
      if (message === "") {
        return true;
      } else {
        return false;
      }
    }
    warning = this.getWarning(key);
    if (message === "" && warning === "") {
      $message.hide();
      if (autoscroll) {
        this.autoscroll($question);
      }
      return true;
    } else if (message === "" && warning !== "") {
      warning = "<span class='warning'>" + warning + "</span>";
      $message.show().html(warning);
      return true;
    } else if (message !== "" && warning === "") {
      $message.show().html(message + " " + button).find("button").button();
      return false;
    } else {
      warning = "<span class='warning'>" + warning + "</span>";
      $message.show().html(message + " " + warning + " " + button).find("button").button();
      return false;
    }
  };

  QuestionView.prototype.isValid = function(question_id) {
    var error, labelText, question, questionWrapper, ref, required, result, type, validation, validationFunctionResult, value;
    if (!question_id) {
      return;
    }
    result = [];
    questionWrapper = window.questionCache[question_id];
    if (questionWrapper.hasClass("label")) {
      return "";
    }
    question = $("[name='" + question_id + "']", questionWrapper);
    type = $(questionWrapper.find("input").get(0)).attr("type");
    labelText = type === "radio" ? $("label[for=" + (question.attr("id").split("-")[0]) + "]", questionWrapper).text() || "" : (ref = $("label[for=" + (question.attr("id")) + "]", questionWrapper)) != null ? ref.text() : void 0;
    required = questionWrapper.attr("data-required") === "true";
    if (type === "checkbox") {
      required = false;
    }
    validation = unescape(questionWrapper.attr("data-validation"));
    if (validation === "undefined") {
      validation = null;
    }
    value = window.getValueCache[question_id]();
    if (!questionWrapper.is(":visible")) {
      return "";
    }
    if (question.find("input").length !== 0 && (type === "checkbox" || type === "radio")) {
      return "";
    }
    if (required && (value === "" || value === null)) {
      result.push("'" + labelText + "' se requiere.");
    }
    if ((validation != null) && validation !== "") {
      try {
        validationFunctionResult = (CoffeeScript["eval"]("(value) -> " + validation, {
          bare: true
        }))(value);
        if (validationFunctionResult != null) {
          result.push(validationFunctionResult);
        }
      } catch (_error) {
        error = _error;
        if (error === 'invisible reference') {
          return '';
        }
        alert("Validation error for " + question_id + " with value " + value + ": " + error);
      }
    }
    if (result.length !== 0) {
      return result.join("<br>") + "<br>";
    }
    return "";
  };

  QuestionView.prototype.getWarning = function(question_id) {
    var error, question, questionWrapper, value, warningCode, warningFunctionResult;
    value = window.getValueCache[question_id]();
    questionWrapper = window.questionCache[question_id];
    question = $("[name='" + question_id + "']", questionWrapper);
    warningCode = unescape(questionWrapper.attr("data-warning"));
    if ((warningCode != null) && warningCode !== "") {
      try {
        warningFunctionResult = (CoffeeScript["eval"]("(value) -> " + warningCode, {
          bare: true
        }))(value);
        if (warningFunctionResult != null) {
          return warningFunctionResult;
        }
      } catch (_error) {
        error = _error;
        if (error === 'invisible reference') {
          return '';
        }
        alert("Custom warning error for " + question_id + " with value " + value + ": " + error);
      }
    }
    return '';
  };

  QuestionView.prototype.autoscroll = function(event) {
    var $div, $oldNext, $parentsMaybe, $target, count, name, results;
    clearTimeout(this.autoscrollTimer);
    if (event.jquery) {
      $div = event;
      name = $div.attr("data-question-name");
    } else {
      $target = $(event.target);
      name = $target.attr("name");
      $div = window.questionCache[name];
    }
    if ($div.hasClass("checkbox")) {
      return;
    }
    $oldNext = $div;
    this.$next = $div.next(".question");
    this.$prev = $div;
    if (this.$next.length === 0) {
      $parentsMaybe = $oldNext.parent().next(".question");
      if ($parentsMaybe.length !== 0) {
        this.$next = $parentsMaybe;
      }
    }
    count = 0;
    if (!this.$next.is(":visible")) {
      results = [];
      while ((!this.$next.is(":visible")) || this.$next.length !== 0) {
        count++;
        $oldNext = $(this.$next);
        this.$next = this.$next.next(".question");
        if (count > 100) {
          break;
        }
        if (this.$next.length === 0) {
          $parentsMaybe = $oldNext.parent().next(".question");
          if ($parentsMaybe.length !== 0) {
            results.push(this.$next = $parentsMaybe);
          } else {
            results.push(void 0);
          }
        } else {
          results.push(void 0);
        }
      }
      return results;
    } else {
      $(window).on("scroll", (function(_this) {
        return function() {
          $(window).off("scroll");
          return clearTimeout(_this.autoscrollTimer);
        };
      })(this));
      return this.autoscrollTimer = setTimeout((function(_this) {
        return function() {
          $(window).off("scroll");
          if (!window.saveERROR) {
            return _this.$next.scrollTo().find("input[type='text'],input[type='number'],input[type='autocomplete from previous entries'], input[type='autocomplete from list']").first().focus();
          } else {
            _this.$prev.scrollTo().find("input[type='text'],input[type='number'],input[type='autocomplete from previous entries'], input[type='autocomplete from list']").first().val('');
            return _this.$prev.scrollTo().find("input[type='text'],input[type='number'],input[type='autocomplete from previous entries'], input[type='autocomplete from list']").first().focus();
          }
        };
      })(this), 1000);
    }
  };

  QuestionView.prototype.actionOnChange = function(event) {
    var $divQuestion, $target, code, error, message, name, newFunction, nodeName, value;
    nodeName = $(event.target).get(0).nodeName;
    $target = nodeName === "INPUT" || nodeName === "SELECT" || nodeName === "TEXTAREA" ? $(event.target) : $(event.target).parent().parent().parent().find("input,textarea,select");
    name = $target.attr("name");
    $divQuestion = $(".question [data-question-name='" + name + "']");
    code = $divQuestion.attr("data-action_on_change");
    try {
      value = ResultOfQuestion(name);
    } catch (_error) {
      error = _error;
      if (error === "invisible reference") {
        return;
      }
    }
    if (code === "" || (code == null)) {
      return;
    }
    code = "(value) -> " + code;
    try {
      newFunction = CoffeeScript["eval"].apply(this, [code]);
      return newFunction(value);
    } catch (_error) {
      error = _error;
      name = (/function (.{1,})\(/.exec(error.constructor.toString())[1]);
      message = error.message;
      return alert("Action on change error in question " + ($divQuestion.attr('data-question-id') || $divQuestion.attr("id")) + "\n\n" + name + "\n\n" + message);
    }
  };

  QuestionView.prototype.updateSkipLogic = function() {
    var $question, error, message, name, ref, result, results, skipLogicCode;
    ref = window.questionCache;
    results = [];
    for (name in ref) {
      $question = ref[name];
      skipLogicCode = window.skipLogicCache[name];
      if (skipLogicCode === "" || (skipLogicCode == null)) {
        continue;
      }
      try {
        result = eval(skipLogicCode);
      } catch (_error) {
        error = _error;
        if (error === "invisible reference") {
          result = true;
        } else {
          name = (/function (.{1,})\(/.exec(error.constructor.toString())[1]);
          message = error.message;
          alert("Skip logic error in question " + ($question.attr('data-question-id')) + "\n\n" + name + "\n\n" + message);
        }
      }
      if (result) {
        results.push($question[0].style.display = "none");
      } else {
        results.push($question[0].style.display = "");
      }
    }
    return results;
  };

  QuestionView.prototype.save = _.throttle(function() {
    var currentData;
    currentData = $('#question-view').toObject({
      skipEmpty: false
    });
    currentData.lastModifiedAt = moment(new Date()).format(Coconut.config.get("datetime_format"));
    currentData.savedBy = $.cookie('current_user');
    return Coconut.questionView.result.save(currentData, {
      success: function() {
        var uuid;
        window.saveERROR = false;
        if (Coconut.questionView.result.get("Completado") === "true") {
          uuid = Coconut.questionView.result.get("uuid");
          if (window.Coconut.questionView.model.id === 'Participant Registration-es' && window.showSuccess) {
            alert('¡Enhorabuena! Has completado correctamente el formulario. El UUID para esta forma es "' + uuid + '". Tome nota de este número para referencia futura.');
            window.showSuccess = false;
          } else if (window.showSuccess && window.Coconut.questionView.model.id === 'Participant Survey-es' && window.showSuccess) {
            alert('¡Felicitaciones! Has completado la Encuesta de Participante para UUID=' + uuid);
            window.showSuccess = false;
          }
        }
        return $("#messageText").slideDown().fadeOut();
      },
      error: function() {
        window.saveERROR = true;
        if (window.showSuccess) {
          return alert('La información digitada no fue guardada debido a un problema con su conexión de Internet. Por favor, verifique y corriga su conexión de internet antes de continuar con la digitación');
        }
      }
    });
  }, 1000, {
    trailing: false
  });

  QuestionView.prototype.completeButton = function(value) {
    this.changedComplete = true;
    if ($('[name=Completado]').prop("checked") !== value) {
      $('[name=Completado]').click();
      return this.save();
    }
  };

  QuestionView.prototype.toHTMLForm = function(questions, groupId, isRepeatedGroup, index) {
    var html, titleIndex;
    if (questions == null) {
      questions = this.model;
    }
    if (questions.length == null) {
      questions = [questions];
    }
    if (index == null) {
      index = 0;
    } else {
      if (isRepeatedGroup) {
        titleIndex = "<span class='title_index'>" + (index + 1) + "</span>";
      }
    }
    html = '';
    _(questions).each((function(_this) {
      return function(question) {
        var cbChecked, cbValue, groupTitle, isRepeatable, labelHeader, name, option, options, program, programString, questionProgramId, questionProgramName, question_id, repeatButton, validation, warning;
        labelHeader = question.type() === "label" ? ["<h2>", "</h2>"] : ["", ""];
        if (question.has('warning')) {
          warning = "data-warning='" + (_.escape(question.warning())) + "'";
        }
        if (question.has('validation')) {
          validation = "data-validation='" + (_.escape(question.validation())) + "'";
        }
        isRepeatable = question.repeatable();
        if (isRepeatable) {
          repeatButton = "<button class='repeat'>+</button>";
        }
        if (isRepeatable || isRepeatedGroup) {
          name = question.safeLabel() + ("[" + index + "]");
          question_id = question.get("id") + ("-" + index);
        } else {
          name = question.safeLabel();
          question_id = question.get("id");
        }
        window.skipLogicCache[name] = question.skipLogic() !== '' ? CoffeeScript.compile(question.skipLogic(), {
          bare: true
        }) : '';
        if (question.questions().length !== 0) {
          if (question.label() !== '' && question.label() !== question.get("_id")) {
            groupTitle = "<h1>" + (question.label()) + " " + (titleIndex || '') + "</h1>";
          }
          return html += "<div data-group-id='" + question_id + "' data-question-name='" + name + "' data-question-id='" + question_id + "' class='question group'> " + (groupTitle || '') + " " + (_this.toHTMLForm(question.questions(), question_id, isRepeatable, index)) + " </div> " + (repeatButton || '');
        } else {
          return html += "<div " + ((question.type() === 'hidden' ? "style='display:none;'" : void 0) || '') + " class='question " + (question.type()) + "' data-question-name='" + name + "' data-question-id='" + question_id + "' data-action_on_change='" + (_.escape(question.actionOnChange())) + "' " + (validation || '') + " " + (warning || '') + " data-required='" + (question.required()) + "' > " + (question.type() !== 'hidden' ? "<label type='" + (question.type()) + "' for='" + question_id + "' class='ui-input-text'>" + labelHeader[0] + (question.label()) + labelHeader[1] + " <span></span></label>" : "") + " " + ("<p class='grey'>" + (question.hint()) + "</p>") + " <div class='message'></div> " + ((function() {
            var j, k, len, len1, ref, ref1;
            switch (question.type()) {
              case "textarea":
                return "<input name='" + name + "' type='text' id='" + question_id + "' value='" + (_.escape(question.value())) + "'></input>";
              case "select":
                if (this.readonly) {
                  return question.value();
                } else {
                  html = "<select>";
                  ref = question.get("select-options").split(/, */);
                  for (index = j = 0, len = ref.length; j < len; index = ++j) {
                    option = ref[index];
                    html += "<option name='" + name + "' id='" + question_id + "-" + index + "' value='" + option + "'>" + option + "</option>";
                  }
                  return html += "</select>";
                }
                break;
              case "radio":
                if (this.readonly) {
                  return "<input name='" + name + "' type='text' id='" + question_id + "' value='" + (question.value()) + "' class='ui-input-text ui-body-c ui-corner-all ui-shadow-inset'></input>";
                } else {
                  options = question.get("radio-options");
                  return _.map(options.split(/, */), function(option, index) {
                    return "<label for='" + question_id + "-" + index + "' class='ui-input-text'>" + option + "</label> <input type='radio' name='" + name + "' id='" + question_id + "-" + index + "' value='" + (_.escape(option)) + "'/>";
                  }).join("");
                }
                break;
              case "programnameslist":
                programString = '';
                programString += "<div data-group-id='" + question_id + "' data-question-name='" + name + "' data-question-id='" + question_id + "' class='question group'>";
                ref1 = this.wsData.programsList;
                for (k = 0, len1 = ref1.length; k < len1; k++) {
                  program = ref1[k];
                  questionProgramId = question_id + '_' + program.programnameid;
                  questionProgramName = name + '_' + program.programnameid;
                  programString += "<div class='question radio' data-question-name='" + questionProgramName + "' data-question-id='" + questionProgramId + "' data-action_on_change='" + (_.escape(question.actionOnChange())) + "' " + (validation || '') + " " + (warning || '') + " data-required='true' >";
                  programString += "<h2>" + program.programname + "</h2>";
                  if (this.readonly) {
                    programString += "<input name='" + questionProgramName + "' type='text' id='" + questionProgramId + "' value='" + (question.value()) + "' class='ui-input-text ui-body-c ui-corner-all ui-shadow-inset'></input>";
                  } else {
                    options = question.get("radio-options");
                    programString += _.map(options.split(/, */), function(option, index) {
                      return "<label for='" + questionProgramId + "-" + index + "' class='ui-input-text'>" + option + "</label> <input type='radio' name='" + questionProgramName + "' id='" + questionProgramId + "-" + index + "' value='" + (_.escape(option)) + "'/>";
                    }).join("");
                  }
                  programString += "</div>";
                }
                programString += "</div>";
                return programString;
              case "date":
                if (this.readonly) {
                  return "<input name='" + name + "' type='text' id='" + question_id + "' value='" + (question.value()) + "'>";
                } else {
                  return "<br> <input type='date' name='" + name + "' id='" + question_id + "' class='ui-input-text' value='" + (_.escape(option)) + "'/>";
                }
                break;
              case "checkbox":
                if (this.readonly) {
                  return "<input name='" + name + "' type='text' id='" + question_id + "' value='" + (_.escape(question.value())) + "'></input>";
                } else {
                  return "<input style='display:none' name='" + name + "' id='" + question_id + "' type='checkbox' value='true'></input>";
                }
                break;
              case "checkboxpreselected":
                if (this.readonly) {
                  return "<input name='" + name + "' type='text' id='" + question_id + "' value='" + (_.escape(question.value())) + "'></input>";
                } else {
                  cbChecked = "";
                  cbValue = this.result.safeGet(name, '');
                  if (cbValue === 'true') {
                    cbChecked = " checked='checked' ";
                  }
                  return "<input style='display:none' name='" + name + "' id='" + question_id + "' type='checkbox' value='true' " + cbChecked + "></input>";
                }
                break;
              case "autocomplete from list":
              case "autocomplete from previous entries":
                return "<!-- autocomplete='off' disables browser completion --> <input autocomplete='off' name='" + name + "' id='" + question_id + "' type='" + (question.type()) + "' value='" + (question.value()) + "' data-autocomplete-options='" + (question.get("autocomplete-options")) + "' class='ui-input-text ui-body-c ui-corner-all ui-shadow-inset'></input> <ul id='" + question_id + "-suggestions' data-role='listview' data-inset='true'/>";
              case "location":
                return "<a data-question-id='" + question_id + "'>Get current location</a> <label for='" + question_id + "-description' class='ui-input-text'>Location Description</label> <input type='text' name='" + name + "-description' id='" + question_id + "-description'></input> " + (_.map(["latitude", "longitude"], function(field) {
                  return "<label for='" + question_id + "-" + field + "' class='ui-input-text'>" + field + "</label><input readonly='readonly' type='number' name='" + name + "-" + field + "' id='" + question_id + "-" + field + "'></input>";
                }).join("")) + " " + (_.map(["altitude", "accuracy", "altitudeAccuracy", "heading", "timestamp"], function(field) {
                  return "<input type='hidden' name='" + name + "-" + field + "' id='" + question_id + "-" + field + "'></input>";
                }).join(""));
              case "image":
                return "<img style='" + (question.get("image-style")) + "' src='" + (question.get("image-path")) + "'/>";
              case "hidden":
                if (!this.readonly) {
                  return "<input type='hidden' name='" + name + "' id='" + question_id + "'>";
                } else {
                  return "<input name='" + name + "' type='text' id='" + question_id + "' value='" + (_.escape(question.value())) + "'>";
                }
                break;
              case "label":
                return "";
              default:
                return "<input name='" + name + "' id='" + question_id + "' type='" + (question.type()) + "' value='" + (question.value()) + "' class='ui-input-text ui-body-c ui-corner-all ui-shadow-inset'></input>";
            }
          }).call(_this)) + " </div> " + (repeatButton || '');
        }
      };
    })(this));
    return html;
  };

  QuestionView.prototype.toSummaryForm = function(questions, groupId, isRepeatedGroup, index) {
    var html, titleIndex;
    if (questions == null) {
      questions = this.model;
    }
    if (questions.length == null) {
      questions = [questions];
    }
    if (index == null) {
      index = 0;
    } else {
      if (isRepeatedGroup) {
        titleIndex = "<span class='title_index'>" + (index + 1) + "</span>";
      }
    }
    html = '';
    _(questions).each((function(_this) {
      return function(question) {
        var cbChecked, cbValue, groupTitle, isRepeatable, labelHeader, name, option, question_id, repeatButton, validation, warning;
        labelHeader = question.type() === "label" ? ["<h2>", "</h2>"] : ["", ""];
        if (question.has('warning')) {
          warning = "data-warning='" + (_.escape(question.warning())) + "'";
        }
        if (question.has('validation')) {
          validation = "data-validation='" + (_.escape(question.validation())) + "'";
        }
        isRepeatable = question.repeatable();
        if (isRepeatable) {
          repeatButton = "<button class='repeat_summary'>+</button>";
        }
        if (isRepeatable || isRepeatedGroup) {
          name = question.safeLabel() + ("[" + index + "]");
          question_id = question.get("id") + ("-" + index);
        } else {
          name = question.safeLabel();
          question_id = question.get("id");
        }
        window.skipLogicCache[name] = question.skipLogic() !== '' ? CoffeeScript.compile(question.skipLogic(), {
          bare: true
        }) : '';
        if (question.questions().length !== 0) {
          if (question.label() !== '' && question.label() !== question.get("_id")) {
            groupTitle = "<h1>" + (question.label()) + " " + (titleIndex || '') + "</h1>";
          }
          return html += "<div data-group-id='" + question_id + "' data-question-name='" + name + "' data-question-id='" + question_id + "' class='question group'> " + (groupTitle || '') + " " + (_this.toSummaryForm(question.questions(), question_id, isRepeatable, index)) + " </div> " + (repeatButton || '');
        } else {
          return html += "<div " + ((question.type() === 'hidden' ? "style='display:none;'" : void 0) || '') + " class='question " + (question.type()) + "' data-question-name='" + name + "' data-question-id='" + question_id + "' data-action_on_change='" + (_.escape(question.actionOnChange())) + "' " + (validation || '') + " " + (warning || '') + " data-required='" + (question.required()) + "' > " + (question.type() !== 'hidden' ? "<label type='" + (question.type()) + "' for='" + question_id + "' class='ui-input-text'>" + labelHeader[0] + (question.label()) + labelHeader[1] + " <span></span></label>" : "") + " " + ("<p class='grey'>" + (question.hint()) + "</p>") + " <div class='message'></div> " + ((function() {
            var j, len, ref;
            switch (question.type()) {
              case "textarea":
                return "" + (this.result.safeGet(name, ''));
              case "select":
                if (this.readonly) {
                  return question.value();
                } else {
                  html = "<select>";
                  ref = question.get("select-options").split(/, */);
                  for (index = j = 0, len = ref.length; j < len; index = ++j) {
                    option = ref[index];
                    html += "<option name='" + name + "' id='" + question_id + "-" + index + "' value='" + option + "'>" + option + "</option>";
                  }
                  return html += "</select>";
                }
                break;
              case "radio":
                return "" + (this.result.safeGet(name, ''));
              case "date":
                return "" + (this.result.safeGet(name, ''));
              case "checkbox":
                cbChecked = "";
                cbValue = this.result.safeGet(name, '');
                if (cbValue === 'true') {
                  cbChecked = " checked='checked' ";
                }
                return "<input style='display:none' name='" + name + "' id='" + question_id + "' type='checkbox' value='true' " + cbChecked + " disabled='disabled'></input>";
              case "autocomplete from list":
              case "autocomplete from previous entries":
                return "" + (this.result.safeGet(name, ''));
              case "location":
                return "<a data-question-id='" + question_id + "'>Get current location</a> <label for='" + question_id + "-description'>Location Description</label> <input type='text' name='" + name + "-description' id='" + question_id + "-description'></input> " + (_.map(["latitude", "longitude"], function(field) {
                  return "<label for='" + question_id + "-" + field + "' class='ui-input-text'>" + field + "</label><input readonly='readonly' type='number' name='" + name + "-" + field + "' id='" + question_id + "-" + field + "'></input>";
                }).join("")) + " " + (_.map(["altitude", "accuracy", "altitudeAccuracy", "heading", "timestamp"], function(field) {
                  return "<input type='hidden' name='" + name + "-" + field + "' id='" + question_id + "-" + field + "'></input>";
                }).join(""));
              case "image":
                return "<img style='" + (question.get("image-style")) + "' src='" + (question.get("image-path")) + "'/>";
              case "hidden":
                if (!this.readonly) {
                  return "<input type='hidden' name='" + name + "' id='" + question_id + "'>";
                } else {
                  return "<input name='" + name + "' type='text' id='" + question_id + "' value='" + (_.escape(question.value())) + "'>";
                }
                break;
              case "label":
                return "";
              default:
                return "" + (this.result.safeGet(name, ''));
            }
          }).call(_this)) + " </div> " + (repeatButton || '');
        }
      };
    })(this));
    return html;
  };

  QuestionView.prototype.updateCache = function() {
    var $qC, accessorFunction, inputs, isCheckable, j, len, name, question, ref, selects, type;
    window.questionCache = {};
    window.getValueCache = {};
    window.$questions = $(".question");
    ref = window.$questions;
    for (j = 0, len = ref.length; j < len; j++) {
      question = ref[j];
      name = question.getAttribute("data-question-name");
      if (name === "Completado") {
        continue;
      }
      if (name === Coconut.questionView.model.safeLabel()) {
        continue;
      }
      if ((name != null) && name !== "") {
        accessorFunction = {};
        window.questionCache[name] = $(question);
        $qC = window.questionCache[name];
        selects = $("select[name='" + name + "']", $qC);
        if (selects.length === 0) {
          inputs = $("input[name='" + name + "']", $qC);
          if (inputs.length !== 0) {
            type = inputs[0].getAttribute("type");
            isCheckable = type === "radio" || type === "checkbox";
            if (isCheckable) {
              (function(name, $qC) {
                return accessorFunction = function() {
                  return $("input:checked", $qC).safeVal();
                };
              })(name, $qC);
            } else {
              if (type === "hidden") {
                (function(inputs) {
                  return accessorFunction = function() {
                    return inputs.val();
                  };
                })(inputs);
              } else {
                (function(inputs) {
                  return accessorFunction = function() {
                    return inputs.safeVal();
                  };
                })(inputs);
              }
            }
          } else {
            (function(name, $qC) {
              return accessorFunction = function() {
                return $(".textarea[name='" + name + "']", $qC).safeVal();
              };
            })(name, $qC);
          }
        } else {
          (function(selects) {
            return accessorFunction = function() {
              return selects.safeVal();
            };
          })(selects);
        }
        window.getValueCache[name] = accessorFunction;
      }
    }
    return window.keyCache = _.keys(questionCache);
  };

  QuestionView.prototype.currentKeyExistsInResultsFor = function(question) {
    return Coconut.resultCollection.any((function(_this) {
      return function(result) {
        return _this.result.get(_this.key) === result.get(_this.key) && result.get('question') === question;
      };
    })(this));
  };

  QuestionView.prototype.repeat = function(event) {
    var $button, $el, $question, groupId, id, idSplit, index, isRepeatedGroup, question;
    event.stopImmediatePropagation();
    $button = $(event.target);
    $question = $button.prev(".question");
    idSplit = $question.attr("data-question-id").split("-");
    id = parseInt(_(idSplit).first());
    index = parseInt(_(idSplit).last());
    question = _(Coconut.questionView.model.questions()).where({
      "id": id
    })[0];
    groupId = '';
    isRepeatedGroup = true;
    $el = $(this.toHTMLForm(question, groupId, isRepeatedGroup, index + 1));
    $question.after($el);
    if ($el.find(".remove_repeat").length === 0) {
      $el.find(".question").last().append("<button class='remove_repeat'>Borrar</button><br>");
    }
    this.jQueryUIze($el);
    $button.remove();
    return Coconut.questionView.updateCache();
  };

  QuestionView.prototype.repeatSummary = function(event) {
    var $button, $el, $question, groupId, id, idSplit, index, isRepeatedGroup, question;
    event.stopImmediatePropagation();
    $button = $(event.target);
    $question = $button.prev(".question");
    idSplit = $question.attr("data-question-id").split("-");
    id = parseInt(_(idSplit).first());
    index = parseInt(_(idSplit).last());
    question = _(Coconut.questionView.model.questions()).where({
      "id": id
    })[0];
    groupId = '';
    isRepeatedGroup = true;
    $el = $(this.toSummaryForm(question, groupId, isRepeatedGroup, index));
    $question.after($el);
    if ($el.find(".remove_repeat").length === 0) {
      $el.find(".question").last().append("<button class='remove_repeat'>Borrar</button><br>");
    }
    this.jQueryUIze($el);
    $button.remove();
    return Coconut.questionView.updateCache();
  };

  QuestionView.prototype.removeRepeat = function(event) {
    var $parent, i;
    $parent = $(event.target).parent();
    i = 0;
    while (!$parent.hasClass("group")) {
      if (i++ > 50) {
        break;
      }
      $parent = $parent.parent();
    }
    return $parent.remove();
  };

  QuestionView.prototype.getLocation = function(event) {
    var question_id;
    question_id = $(event.target).closest("[data-question-id]").attr("data-question-id");
    $("#" + question_id + "-description").val("Retrieving position, please wait.");
    return navigator.geolocation.getCurrentPosition((function(_this) {
      return function(geoposition) {
        _.each(geoposition.coords, function(value, key) {
          return $("#" + question_id + "-" + key).val(value);
        });
        $("#" + question_id + "-timestamp").val(moment(geoposition.timestamp).format(Coconut.config.get("datetime_format")));
        $("#" + question_id + "-description").val("Success");
        _this.save();
        return $.getJSON("http://api.geonames.org/findNearbyPlaceNameJSON?lat=" + geoposition.coords.latitude + "&lng=" + geoposition.coords.longitude + "&username=mikeymckay&callback=?", null, function(result) {
          $("#" + question_id + "-description").val(parseFloat(result.geonames[0].distance).toFixed(1) + " km from center of " + result.geonames[0].name);
          return _this.save();
        });
      };
    })(this), function(error) {
      return $("#" + question_id + "-description").val("Error: " + error);
    }, {
      frequency: 1000,
      enableHighAccuracy: true,
      timeout: 30000,
      maximumAge: 0
    });
  };

  return QuestionView;

})(Backbone.View);

window.SkipTheseWhen = function(argQuestions, result) {
  var disabledClass, j, k, len, len1, question, questions, results;
  questions = [];
  argQuestions = argQuestions.split(/\s*,\s*/);
  for (j = 0, len = argQuestions.length; j < len; j++) {
    question = argQuestions[j];
    questions.push(window.questionCache[question]);
  }
  disabledClass = "disabled_skipped";
  results = [];
  for (k = 0, len1 = questions.length; k < len1; k++) {
    question = questions[k];
    if (result) {
      results.push(question.addClass(disabledClass));
    } else {
      results.push(question.removeClass(disabledClass));
    }
  }
  return results;
};

window.ResultOfQuestion = function(name) {
  var base;
  return (typeof (base = window.getValueCache)[name] === "function" ? base[name]() : void 0) || null;
};

//# sourceMappingURL=QuestionView.js.map
